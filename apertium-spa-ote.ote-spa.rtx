!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

number = (ND sg) sg pl sp ND;
gender = (GD m) m f mf GD;
det_type = def ind dem itg pos ;
tense = pres past fut ifi pri fti;

!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

n: _.gender.number;
adj: _.gender.number;
det_default: _.det_type;
det_def: _.det_type.gender.number;
det_pos: _.det_type.<mf>.number;
predet: _.gender.number;

NP: _.gender.number;

nP: _.gender.number;
adjP: _.gender.number;

!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

tense > tense : ifi past, pri pres, fti fut;

!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!

det: (if (1.det_type = def or 1.det_type = ind)
         1(det_def)
      else-if (1.det_type = pos)
         1(det_pos)
      else
         1(det_default));

!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

nP -> n.$number adj { 2[gender=1.gender, number=1.number] _1 1 } |
      det %n { 1[gender=2.gender, number=2.number] _ 2 } |
      predet %n { 1[gender=2.gender, number=2.number] _ 2 } |
      predet det %n { 1[gender=3.gender, number=3.number] _ 2[gender=3.gender, number=3.number]_ 3 } |
      %n { 1 } ;

NP -> nP nP { 1 _ de@pr _ 2 } |
      adjP nP { 2 _ 1[gender=2.gender, number=2.number] } ;

adjP -> %adj { 1 } ;

! for when there are missing nouns following
det -> %det { 1 } ;
predet -> %predet { 1 } ;

! Resources:
! http://wiki.apertium.org/wiki/Apertium-recursive
! http://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! http://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
